name: Build and Release Windows Wheels

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for the release (e.g., v1.0.0)'
        required: true
      release_name:
        description: 'Release name (optional)'
        required: false

jobs:
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    steps:
      - uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Install maturin
        run: pip install maturin

      - name: Download Npcap SDK
        run: |
          Invoke-WebRequest -Uri https://nmap.org/npcap/dist/npcap-sdk-1.13.zip -OutFile npcapsdk.zip
          Expand-Archive npcapsdk.zip -DestinationPath $env:USERPROFILE\npcap-sdk

      - name: Set Environment Variables
        run: |
          echo "INCLUDE=$env:INCLUDE;$env:USERPROFILE\npcap-sdk\Include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "LIB=$env:LIB;$env:USERPROFILE\npcap-sdk\Lib\x64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Build wheel
        run: maturin build --release

      - name: Upload wheel artifact
        uses: actions/upload-artifact@v3
        with:
          name: windows-wheel-${{ matrix.python-version }}
          path: target/wheels/*.whl

  release:
    needs: build-windows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download wheel artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./wheels

      - name: Set Release Tag and Name
        id: get_release_info
        shell: bash
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TAG_NAME="${{ github.event.inputs.tag_name }}"
            RELEASE_NAME="${{ github.event.inputs.release_name }}"
            if [ -z "$RELEASE_NAME" ]; then
              RELEASE_NAME="$TAG_NAME"
            fi
          else
            TAG_NAME="${GITHUB_REF##*/}"
            RELEASE_NAME="${GITHUB_REF##*/}"
          fi
          echo "Tag Name: $TAG_NAME"
          echo "Release Name: $RELEASE_NAME"
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

      - name: Create Release and Upload Wheels
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          files: ./wheels/**/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
